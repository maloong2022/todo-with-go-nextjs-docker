// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const createTodos = `-- name: CreateTodos :one
INSERT INTO todos (
  title,content,createdAt
) VALUES (
  $1, $2, $3
)
RETURNING id, title, content, createdat
`

type CreateTodosParams struct {
	Title     string
	Content   string
	Createdat time.Time
}

func (q *Queries) CreateTodos(ctx context.Context, arg CreateTodosParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodos, arg.Title, arg.Content, arg.Createdat)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Createdat,
	)
	return i, err
}

const deleteTodos = `-- name: DeleteTodos :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodos(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodos, id)
	return err
}

const getTodos = `-- name: GetTodos :one
SELECT id, title, content, createdat FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodos(ctx context.Context, id int64) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodos, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Createdat,
	)
	return i, err
}

const listAllTodos = `-- name: ListAllTodos :many
SELECT id, title, content, createdat FROM todos
ORDER BY id
`

func (q *Queries) ListAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, listAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE todos
  set title = $2,
  content = $3
WHERE id = $1
`

type UpdateTodoParams struct {
	ID      int64
	Title   string
	Content string
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo, arg.ID, arg.Title, arg.Content)
	return err
}
